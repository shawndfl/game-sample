(()=>{"use strict";var e,t={39:(e,t,i)=>{i.r(t),i.d(t,{default:()=>s});const s=i.p+"fedc4d2bad9c84c685c01b50793c315e.png"},924:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=i(232),a=new s.Vector3,r=new s.Spherical;t.default=class{constructor(e,t){this.camera=t,this._viewHalfX=0,this._viewHalfY=0,this._enabled=!0,this.domElement=e,this._movementSpeed=1,this._lookSpeed=.05,this._lookVertical=!0,this._autoForward=!1,this._activeLook=!1,this._heightSpeed=!1,this._heightCoef=1,this._heightMin=0,this._heightMax=1,this._constrainVertical=!1,this._verticalMin=0,this._verticalMax=Math.PI,this._mouseDragOn=!1,this._constrainVertical=!1,this._verticalMin=0,this._verticalMax=Math.PI,this._mouseDragOn=!1,this._autoSpeedFactor=0,this._mouseX=0,this._mouseY=0,this._moveForward=!1,this._moveBackward=!1,this._moveLeft=!1,this._moveRight=!1,this._moveUp=!1,this._moveDown=!1,this._viewHalfX=0,this._viewHalfY=0,this._lat=0,this._lon=0,window.addEventListener("keydown",(e=>{switch(e.code){case"ArrowUp":case"KeyW":this._moveForward=!0;break;case"ArrowLeft":case"KeyA":this._moveLeft=!0;break;case"ArrowDown":case"KeyS":this._moveBackward=!0;break;case"ArrowRight":case"KeyD":this._moveRight=!0;break;case"KeyR":this._moveUp=!0;break;case"KeyF":this._moveDown=!0}})),window.addEventListener("keyup",(e=>{switch(e.code){case"ArrowUp":case"KeyW":this._moveForward=!1;break;case"ArrowLeft":case"KeyA":this._moveLeft=!1;break;case"ArrowDown":case"KeyS":this._moveBackward=!1;break;case"ArrowRight":case"KeyD":this._moveRight=!1;break;case"KeyR":this._moveUp=!1;break;case"KeyF":this._moveDown=!1}})),this.domElement.addEventListener("mousedown",(e=>{0===e.button&&(this._activeLook=!0),this._mouseDragOn=!0})),this.domElement.addEventListener("mousemove",(e=>{this._activeLook&&(this._mouseX=e.pageX-this.domElement.offsetLeft-this._viewHalfX,this._mouseY=e.pageY-this.domElement.offsetTop-this._viewHalfY)})),this.domElement.addEventListener("mouseup",(e=>{0===e.button&&(this._activeLook=!1),this._mouseDragOn=!1})),this.domElement.addEventListener("contextmenu",this.contextmenu),this.onResize(),this.setOrientation()}setOrientation(){const e=this.camera.quaternion;a.set(0,0,-1).applyQuaternion(e),r.setFromVector3(a),this._lat=90-s.MathUtils.radToDeg(r.phi),this._lon=s.MathUtils.radToDeg(r.theta)}onResize(){this._viewHalfX=this.domElement.offsetWidth/2,this._viewHalfY=this.domElement.offsetHeight/2}update(e){if(!1===this._enabled)return;if(this._heightSpeed){const t=s.MathUtils.clamp(this.camera.position.y,this._heightMin,this._heightMax)-this._heightMin;this._autoSpeedFactor=e*(t*this._heightCoef)}else this._autoSpeedFactor=0;const t=e*this._movementSpeed;(this._moveForward||this._autoForward&&!this._moveBackward)&&this.camera.translateZ(-(t+this._autoSpeedFactor)),this._moveBackward&&this.camera.translateZ(t),this._moveLeft&&this.camera.translateX(-t),this._moveRight&&this.camera.translateX(t),this._moveUp&&this.camera.translateY(t),this._moveDown&&this.camera.translateY(-t);let i=e*this._lookSpeed;this._activeLook||(i=0);let a=1;this._constrainVertical&&(a=Math.PI/(this._verticalMax-this._verticalMin)),this._lon-=this._mouseX*i,this._lookVertical&&(this._lat-=this._mouseY*i*a),this._lat=Math.max(-85,Math.min(85,this._lat));let r=s.MathUtils.degToRad(90-this._lat);const o=s.MathUtils.degToRad(this._lon);this._constrainVertical&&(r=s.MathUtils.mapLinear(r,0,Math.PI,this._verticalMin,this._verticalMax));const n=this.camera.position,h=new s.Vector3;h.setFromSphericalCoords(1,r,o).add(n),this.camera.lookAt(h)}contextmenu(e){e.preventDefault()}dispose(){}}},535:function(e,t,i){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=s(i(924)),r=s(i(767)),o=i(232);t.default=class{constructor(e){this._container=e,this.update=()=>{const e=this._clock.getDelta();this._cameraController.update(e),requestAnimationFrame(this.update),this.renderer.render(this.scene,this._camera)},this.scene=new o.Scene,this._clock=new o.Clock,this._camera=new o.PerspectiveCamera(45,1.25,.01,1e3),this.renderer=new o.WebGLRenderer,this._cameraController=new a.default(this._container,this._camera),this._camera.position.add(new o.Vector3(0,1,0)),this._terrain=new r.default,this._initialize(this._container)}_initialize(e){this.renderer.setSize(window.innerWidth,window.innerHeight),e.appendChild(this.renderer.domElement),window.addEventListener("resize",(e=>{this.onResize(e)}));const t=new o.BoxGeometry(1,1,1),i=new o.MeshBasicMaterial({color:65280}),s=new o.Mesh(t,i);this.scene.add(s),this.scene.add(this._terrain.mesh),this._camera.position.z=5,requestAnimationFrame(this.update)}onResize(e){this._camera.aspect=window.innerWidth/window.innerHeight,this._camera.updateProjectionMatrix(),this.renderer.setSize(this._container.clientWidth,this._container.clientHeight),this._cameraController.onResize()}}},767:function(e,t,i){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=i(232),r=s(i(39));t.default=class{constructor(){this._geometry=new a.PlaneGeometry(100,100,100),this._geometry.rotateX(-90*a.MathUtils.DEG2RAD),this._material=new a.MeshBasicMaterial({color:65535}),this._diffused=(new a.TextureLoader).load(r.default),this._diffused.wrapS=a.RepeatWrapping,this._diffused.wrapT=a.RepeatWrapping,this._material.map=this._diffused,this._material.map.repeat=new a.Vector2(50,50),this._mesh=new a.Mesh(this._geometry,this._material)}get mesh(){return this._mesh}}},607:function(e,t,i){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.App=void 0;const a=s(i(535));t.App=new class{constructor(e){this._initializeView(e),this._engine=new a.default(e)}get Engine(){return this._engine}_initializeView(e){e.style.height="100vh",e.style.width="100%",e.style.background="#646464",e.style.border="1"}}(document.getElementById("gameContainer"))}},i={};function s(e){var a=i[e];if(void 0!==a)return a.exports;var r=i[e]={exports:{}};return t[e].call(r.exports,r,r.exports,s),r.exports}s.m=t,e=[],s.O=(t,i,a,r)=>{if(!i){var o=1/0;for(l=0;l<e.length;l++){for(var[i,a,r]=e[l],n=!0,h=0;h<i.length;h++)(!1&r||o>=r)&&Object.keys(s.O).every((e=>s.O[e](i[h])))?i.splice(h--,1):(n=!1,r<o&&(o=r));if(n){e.splice(l--,1);var c=a();void 0!==c&&(t=c)}}return t}r=r||0;for(var l=e.length;l>0&&e[l-1][2]>r;l--)e[l]=e[l-1];e[l]=[i,a,r]},s.d=(e,t)=>{for(var i in t)s.o(t,i)&&!s.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),(()=>{var e={index:0};s.O.j=t=>0===e[t];var t=(t,i)=>{var a,r,[o,n,h]=i,c=0;if(o.some((t=>0!==e[t]))){for(a in n)s.o(n,a)&&(s.m[a]=n[a]);if(h)var l=h(s)}for(t&&t(i);c<o.length;c++)r=o[c],s.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return s.O(l)},i=self.webpackChunkgame_sample=self.webpackChunkgame_sample||[];i.forEach(t.bind(null,0)),i.push=t.bind(null,i.push.bind(i))})();var a=s.O(void 0,["vendors"],(()=>s(607)));a=s.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,